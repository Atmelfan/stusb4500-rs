//! NVM Reset
//!
//! This demo is intended to run on a linux host (e.g. a Raspberry Pi) and shows how to read and
//! write the NVM over IÂ²C. It dumps the existing NVM and then writes the factory default - as
//! generated by the [ST GUI application][gui] - so be careful.
//!
//! [gui]: https://www.st.com/en/embedded-software/stsw-stusb002.html

use linux_embedded_hal::I2cdev;
use stusb4500::{nvm::DEFAULT_NVM_DATA, Address, STUSB4500};

const I2C_BUS: &str = "i2c-1";

fn main() {
    let mut mcu = STUSB4500::new(
        I2cdev::new(format!("/dev/{I2C_BUS}")).unwrap(),
        Address::Default,
    );
    let mut nvm = mcu.unlock_nvm().unwrap();

    let sectors = nvm.read_sectors().unwrap();
    println!("Read NVM data:");
    sectors.iter().for_each(|sector| {
        sector.iter().for_each(|byte| print!(" 0x{:02X}", byte));
        println!();
    });

    println!("Writing default NVM data...");
    nvm.write_sectors(DEFAULT_NVM_DATA).unwrap();

    nvm.lock().unwrap();
}
